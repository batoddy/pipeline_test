name: CMake Multi-Platform Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release # Derleme tipini burada ayarlayın (Release, Debug, vb.)

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # Hem Ubuntu hem de Windows üzerinde çalıştır
        # Eğer macOS'a da ihtiyacınız varsa: macos-latest
    
    runs-on: ${{ matrix.os }} # İşletim sistemini matristen alır

    steps:
    - uses: actions/checkout@v4 # Kodları GitHub deposundan çeker

    - name: Configure CMake
      # CMake projesini yapılandırır
      # Windows üzerinde Visual Studio jeneratörü kullanır (varsayılan)
      # Linux üzerinde Makefile jeneratörü kullanır (varsayılan)
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build with CMake
      # Oluşturulan derleme sistemini kullanarak projeyi derler
      # CMake'in --build komutu, platforma özel doğru derleyiciyi (make, MSBuild vb.) çağırır
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        # Artifact ismine işletim sistemini ekleyerek ayırt edilebilirliğini artırırız
        name: cmake-build-outputs-${{ matrix.os }} 
        path: ${{github.workspace}}/build/ # Derleme dizinindeki her şeyi yükler
        retention-days: 5 # Çıktıların kaç gün saklanacağını belirler
